-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity region is
port (
    A : IN STD_LOGIC_VECTOR (31 downto 0);
    B : IN STD_LOGIC_VECTOR (31 downto 0);
    C_i : IN STD_LOGIC_VECTOR (31 downto 0);
    C_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    numa : IN STD_LOGIC_VECTOR (31 downto 0);
    numc : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    tilenuma : IN STD_LOGIC_VECTOR (31 downto 0);
    tilenumc : IN STD_LOGIC_VECTOR (31 downto 0);
    tilen : IN STD_LOGIC_VECTOR (31 downto 0);
    numa_iter : IN STD_LOGIC_VECTOR (31 downto 0);
    numc_iter : IN STD_LOGIC_VECTOR (31 downto 0);
    n_iter : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    C_o_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of region is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "region_region,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.366000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=13,HLS_SYN_DSP=0,HLS_SYN_FF=27813,HLS_SYN_LUT=11378,HLS_VERSION=2020_1}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal region_entry64_U0_ap_start : STD_LOGIC;
    signal region_entry64_U0_start_full_n : STD_LOGIC;
    signal region_entry64_U0_ap_done : STD_LOGIC;
    signal region_entry64_U0_ap_continue : STD_LOGIC;
    signal region_entry64_U0_ap_idle : STD_LOGIC;
    signal region_entry64_U0_ap_ready : STD_LOGIC;
    signal region_entry64_U0_start_out : STD_LOGIC;
    signal region_entry64_U0_start_write : STD_LOGIC;
    signal region_entry64_U0_tilenuma_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal region_entry64_U0_tilenuma_out_write : STD_LOGIC;
    signal region_entry64_U0_tilenuma_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal region_entry64_U0_tilenuma_out1_write : STD_LOGIC;
    signal region_entry64_U0_tilenumc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal region_entry64_U0_tilenumc_out_write : STD_LOGIC;
    signal region_entry64_U0_tilenumc_out2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal region_entry64_U0_tilenumc_out2_write : STD_LOGIC;
    signal region_entry64_U0_tilen_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal region_entry64_U0_tilen_out_write : STD_LOGIC;
    signal region_entry64_U0_numa_iter_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal region_entry64_U0_numa_iter_out_write : STD_LOGIC;
    signal region_entry64_U0_numa_iter_out3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal region_entry64_U0_numa_iter_out3_write : STD_LOGIC;
    signal region_entry64_U0_numc_iter_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal region_entry64_U0_numc_iter_out_write : STD_LOGIC;
    signal region_entry64_U0_numc_iter_out4_din : STD_LOGIC_VECTOR (31 downto 0);
    signal region_entry64_U0_numc_iter_out4_write : STD_LOGIC;
    signal region_entry64_U0_n_iter_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal region_entry64_U0_n_iter_out_write : STD_LOGIC;
    signal region_entry64_U0_n_iter_out5_din : STD_LOGIC_VECTOR (31 downto 0);
    signal region_entry64_U0_n_iter_out5_write : STD_LOGIC;
    signal load_a_U0_ap_start : STD_LOGIC;
    signal load_a_U0_ap_done : STD_LOGIC;
    signal load_a_U0_ap_continue : STD_LOGIC;
    signal load_a_U0_ap_idle : STD_LOGIC;
    signal load_a_U0_ap_ready : STD_LOGIC;
    signal load_a_U0_a_buf_s_din : STD_LOGIC_VECTOR (3199 downto 0);
    signal load_a_U0_a_buf_s_write : STD_LOGIC;
    signal load_a_U0_tilenuma_read : STD_LOGIC;
    signal load_a_U0_tilen_read : STD_LOGIC;
    signal load_a_U0_numa_iter_read : STD_LOGIC;
    signal load_a_U0_n_iter_read : STD_LOGIC;
    signal load_a_U0_numc_iter_read : STD_LOGIC;
    signal load_a_U0_tilenuma_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_a_U0_tilenuma_out_write : STD_LOGIC;
    signal load_a_U0_tilen_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_a_U0_tilen_out_write : STD_LOGIC;
    signal load_a_U0_numa_iter_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_a_U0_numa_iter_out_write : STD_LOGIC;
    signal load_a_U0_n_iter_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_a_U0_n_iter_out_write : STD_LOGIC;
    signal load_a_U0_numc_iter_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_a_U0_numc_iter_out_write : STD_LOGIC;
    signal load_b_U0_ap_start : STD_LOGIC;
    signal load_b_U0_ap_done : STD_LOGIC;
    signal load_b_U0_ap_continue : STD_LOGIC;
    signal load_b_U0_ap_idle : STD_LOGIC;
    signal load_b_U0_ap_ready : STD_LOGIC;
    signal load_b_U0_b_buf_din : STD_LOGIC_VECTOR (3199 downto 0);
    signal load_b_U0_b_buf_write : STD_LOGIC;
    signal load_b_U0_tilenuma_read : STD_LOGIC;
    signal load_b_U0_tilenumc_read : STD_LOGIC;
    signal load_b_U0_numa_iter_read : STD_LOGIC;
    signal load_b_U0_n_iter_read : STD_LOGIC;
    signal load_b_U0_numc_iter_read : STD_LOGIC;
    signal conv_U0_ap_start : STD_LOGIC;
    signal conv_U0_ap_done : STD_LOGIC;
    signal conv_U0_ap_continue : STD_LOGIC;
    signal conv_U0_ap_idle : STD_LOGIC;
    signal conv_U0_ap_ready : STD_LOGIC;
    signal conv_U0_start_out : STD_LOGIC;
    signal conv_U0_start_write : STD_LOGIC;
    signal conv_U0_a_buf_s_read : STD_LOGIC;
    signal conv_U0_b_buf_s_read : STD_LOGIC;
    signal conv_U0_c_buf_s_din : STD_LOGIC_VECTOR (3199 downto 0);
    signal conv_U0_c_buf_s_write : STD_LOGIC;
    signal conv_U0_tilen_read : STD_LOGIC;
    signal conv_U0_tilenuma_read : STD_LOGIC;
    signal conv_U0_tilenumc_read : STD_LOGIC;
    signal conv_U0_numa_iter_read : STD_LOGIC;
    signal conv_U0_n_iter_read : STD_LOGIC;
    signal conv_U0_numc_iter_read : STD_LOGIC;
    signal conv_U0_tilen_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_U0_tilen_out_write : STD_LOGIC;
    signal conv_U0_tilenumc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_U0_tilenumc_out_write : STD_LOGIC;
    signal conv_U0_numa_iter_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_U0_numa_iter_out_write : STD_LOGIC;
    signal conv_U0_n_iter_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_U0_n_iter_out_write : STD_LOGIC;
    signal conv_U0_numc_iter_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_U0_numc_iter_out_write : STD_LOGIC;
    signal store_c_U0_ap_start : STD_LOGIC;
    signal store_c_U0_ap_done : STD_LOGIC;
    signal store_c_U0_ap_continue : STD_LOGIC;
    signal store_c_U0_ap_idle : STD_LOGIC;
    signal store_c_U0_ap_ready : STD_LOGIC;
    signal store_c_U0_C_o : STD_LOGIC_VECTOR (31 downto 0);
    signal store_c_U0_C_o_ap_vld : STD_LOGIC;
    signal store_c_U0_c_buf_read : STD_LOGIC;
    signal store_c_U0_tilenumc_read : STD_LOGIC;
    signal store_c_U0_tilen_read : STD_LOGIC;
    signal store_c_U0_numa_iter_read : STD_LOGIC;
    signal store_c_U0_n_iter_read : STD_LOGIC;
    signal store_c_U0_numc_iter_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal tilenuma_c_full_n : STD_LOGIC;
    signal tilenuma_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tilenuma_c_empty_n : STD_LOGIC;
    signal tilenuma_c11_full_n : STD_LOGIC;
    signal tilenuma_c11_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tilenuma_c11_empty_n : STD_LOGIC;
    signal tilenumc_c_full_n : STD_LOGIC;
    signal tilenumc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tilenumc_c_empty_n : STD_LOGIC;
    signal tilenumc_c12_full_n : STD_LOGIC;
    signal tilenumc_c12_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tilenumc_c12_empty_n : STD_LOGIC;
    signal tilen_c_full_n : STD_LOGIC;
    signal tilen_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tilen_c_empty_n : STD_LOGIC;
    signal numa_iter_c_full_n : STD_LOGIC;
    signal numa_iter_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal numa_iter_c_empty_n : STD_LOGIC;
    signal numa_iter_c13_full_n : STD_LOGIC;
    signal numa_iter_c13_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal numa_iter_c13_empty_n : STD_LOGIC;
    signal numc_iter_c_full_n : STD_LOGIC;
    signal numc_iter_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal numc_iter_c_empty_n : STD_LOGIC;
    signal numc_iter_c14_full_n : STD_LOGIC;
    signal numc_iter_c14_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal numc_iter_c14_empty_n : STD_LOGIC;
    signal n_iter_c_full_n : STD_LOGIC;
    signal n_iter_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal n_iter_c_empty_n : STD_LOGIC;
    signal n_iter_c15_full_n : STD_LOGIC;
    signal n_iter_c15_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal n_iter_c15_empty_n : STD_LOGIC;
    signal a_buf_full_n : STD_LOGIC;
    signal a_buf_dout : STD_LOGIC_VECTOR (3199 downto 0);
    signal a_buf_empty_n : STD_LOGIC;
    signal tilenuma_c16_full_n : STD_LOGIC;
    signal tilenuma_c16_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tilenuma_c16_empty_n : STD_LOGIC;
    signal tilen_c17_full_n : STD_LOGIC;
    signal tilen_c17_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tilen_c17_empty_n : STD_LOGIC;
    signal numa_iter_c18_full_n : STD_LOGIC;
    signal numa_iter_c18_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal numa_iter_c18_empty_n : STD_LOGIC;
    signal n_iter_c19_full_n : STD_LOGIC;
    signal n_iter_c19_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal n_iter_c19_empty_n : STD_LOGIC;
    signal numc_iter_c20_full_n : STD_LOGIC;
    signal numc_iter_c20_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal numc_iter_c20_empty_n : STD_LOGIC;
    signal b_buf_full_n : STD_LOGIC;
    signal b_buf_dout : STD_LOGIC_VECTOR (3199 downto 0);
    signal b_buf_empty_n : STD_LOGIC;
    signal c_buf_full_n : STD_LOGIC;
    signal c_buf_dout : STD_LOGIC_VECTOR (3199 downto 0);
    signal c_buf_empty_n : STD_LOGIC;
    signal tilen_c21_full_n : STD_LOGIC;
    signal tilen_c21_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tilen_c21_empty_n : STD_LOGIC;
    signal tilenumc_c22_full_n : STD_LOGIC;
    signal tilenumc_c22_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal tilenumc_c22_empty_n : STD_LOGIC;
    signal numa_iter_c23_full_n : STD_LOGIC;
    signal numa_iter_c23_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal numa_iter_c23_empty_n : STD_LOGIC;
    signal n_iter_c24_full_n : STD_LOGIC;
    signal n_iter_c24_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal n_iter_c24_empty_n : STD_LOGIC;
    signal numc_iter_c25_full_n : STD_LOGIC;
    signal numc_iter_c25_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal numc_iter_c25_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_load_a_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_load_a_U0_full_n : STD_LOGIC;
    signal start_for_load_a_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_load_a_U0_empty_n : STD_LOGIC;
    signal start_for_load_b_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_load_b_U0_full_n : STD_LOGIC;
    signal start_for_load_b_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_load_b_U0_empty_n : STD_LOGIC;
    signal start_for_conv_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv_U0_full_n : STD_LOGIC;
    signal start_for_conv_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv_U0_empty_n : STD_LOGIC;
    signal load_a_U0_start_full_n : STD_LOGIC;
    signal load_a_U0_start_write : STD_LOGIC;
    signal load_b_U0_start_full_n : STD_LOGIC;
    signal load_b_U0_start_write : STD_LOGIC;
    signal start_for_store_c_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_c_U0_full_n : STD_LOGIC;
    signal start_for_store_c_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_c_U0_empty_n : STD_LOGIC;
    signal store_c_U0_start_full_n : STD_LOGIC;
    signal store_c_U0_start_write : STD_LOGIC;

    component region_region_entry64 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        tilenuma : IN STD_LOGIC_VECTOR (31 downto 0);
        tilenumc : IN STD_LOGIC_VECTOR (31 downto 0);
        tilen : IN STD_LOGIC_VECTOR (31 downto 0);
        numa_iter : IN STD_LOGIC_VECTOR (31 downto 0);
        numc_iter : IN STD_LOGIC_VECTOR (31 downto 0);
        n_iter : IN STD_LOGIC_VECTOR (31 downto 0);
        tilenuma_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        tilenuma_out_full_n : IN STD_LOGIC;
        tilenuma_out_write : OUT STD_LOGIC;
        tilenuma_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        tilenuma_out1_full_n : IN STD_LOGIC;
        tilenuma_out1_write : OUT STD_LOGIC;
        tilenumc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        tilenumc_out_full_n : IN STD_LOGIC;
        tilenumc_out_write : OUT STD_LOGIC;
        tilenumc_out2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        tilenumc_out2_full_n : IN STD_LOGIC;
        tilenumc_out2_write : OUT STD_LOGIC;
        tilen_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        tilen_out_full_n : IN STD_LOGIC;
        tilen_out_write : OUT STD_LOGIC;
        numa_iter_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        numa_iter_out_full_n : IN STD_LOGIC;
        numa_iter_out_write : OUT STD_LOGIC;
        numa_iter_out3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        numa_iter_out3_full_n : IN STD_LOGIC;
        numa_iter_out3_write : OUT STD_LOGIC;
        numc_iter_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        numc_iter_out_full_n : IN STD_LOGIC;
        numc_iter_out_write : OUT STD_LOGIC;
        numc_iter_out4_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        numc_iter_out4_full_n : IN STD_LOGIC;
        numc_iter_out4_write : OUT STD_LOGIC;
        n_iter_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_iter_out_full_n : IN STD_LOGIC;
        n_iter_out_write : OUT STD_LOGIC;
        n_iter_out5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_iter_out5_full_n : IN STD_LOGIC;
        n_iter_out5_write : OUT STD_LOGIC );
    end component;


    component region_load_a IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A : IN STD_LOGIC_VECTOR (31 downto 0);
        a_buf_s_din : OUT STD_LOGIC_VECTOR (3199 downto 0);
        a_buf_s_full_n : IN STD_LOGIC;
        a_buf_s_write : OUT STD_LOGIC;
        tilenuma_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        tilenuma_empty_n : IN STD_LOGIC;
        tilenuma_read : OUT STD_LOGIC;
        tilen_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        tilen_empty_n : IN STD_LOGIC;
        tilen_read : OUT STD_LOGIC;
        numa_iter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numa_iter_empty_n : IN STD_LOGIC;
        numa_iter_read : OUT STD_LOGIC;
        n_iter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        n_iter_empty_n : IN STD_LOGIC;
        n_iter_read : OUT STD_LOGIC;
        numc_iter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numc_iter_empty_n : IN STD_LOGIC;
        numc_iter_read : OUT STD_LOGIC;
        tilenuma_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        tilenuma_out_full_n : IN STD_LOGIC;
        tilenuma_out_write : OUT STD_LOGIC;
        tilen_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        tilen_out_full_n : IN STD_LOGIC;
        tilen_out_write : OUT STD_LOGIC;
        numa_iter_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        numa_iter_out_full_n : IN STD_LOGIC;
        numa_iter_out_write : OUT STD_LOGIC;
        n_iter_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_iter_out_full_n : IN STD_LOGIC;
        n_iter_out_write : OUT STD_LOGIC;
        numc_iter_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        numc_iter_out_full_n : IN STD_LOGIC;
        numc_iter_out_write : OUT STD_LOGIC );
    end component;


    component region_load_b IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B : IN STD_LOGIC_VECTOR (31 downto 0);
        b_buf_din : OUT STD_LOGIC_VECTOR (3199 downto 0);
        b_buf_full_n : IN STD_LOGIC;
        b_buf_write : OUT STD_LOGIC;
        tilenuma_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        tilenuma_empty_n : IN STD_LOGIC;
        tilenuma_read : OUT STD_LOGIC;
        tilenumc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        tilenumc_empty_n : IN STD_LOGIC;
        tilenumc_read : OUT STD_LOGIC;
        numa_iter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numa_iter_empty_n : IN STD_LOGIC;
        numa_iter_read : OUT STD_LOGIC;
        n_iter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        n_iter_empty_n : IN STD_LOGIC;
        n_iter_read : OUT STD_LOGIC;
        numc_iter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numc_iter_empty_n : IN STD_LOGIC;
        numc_iter_read : OUT STD_LOGIC );
    end component;


    component region_conv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        a_buf_s_dout : IN STD_LOGIC_VECTOR (3199 downto 0);
        a_buf_s_empty_n : IN STD_LOGIC;
        a_buf_s_read : OUT STD_LOGIC;
        b_buf_s_dout : IN STD_LOGIC_VECTOR (3199 downto 0);
        b_buf_s_empty_n : IN STD_LOGIC;
        b_buf_s_read : OUT STD_LOGIC;
        c_buf_s_din : OUT STD_LOGIC_VECTOR (3199 downto 0);
        c_buf_s_full_n : IN STD_LOGIC;
        c_buf_s_write : OUT STD_LOGIC;
        tilen_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        tilen_empty_n : IN STD_LOGIC;
        tilen_read : OUT STD_LOGIC;
        tilenuma_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        tilenuma_empty_n : IN STD_LOGIC;
        tilenuma_read : OUT STD_LOGIC;
        tilenumc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        tilenumc_empty_n : IN STD_LOGIC;
        tilenumc_read : OUT STD_LOGIC;
        numa_iter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numa_iter_empty_n : IN STD_LOGIC;
        numa_iter_read : OUT STD_LOGIC;
        n_iter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        n_iter_empty_n : IN STD_LOGIC;
        n_iter_read : OUT STD_LOGIC;
        numc_iter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numc_iter_empty_n : IN STD_LOGIC;
        numc_iter_read : OUT STD_LOGIC;
        tilen_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        tilen_out_full_n : IN STD_LOGIC;
        tilen_out_write : OUT STD_LOGIC;
        tilenumc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        tilenumc_out_full_n : IN STD_LOGIC;
        tilenumc_out_write : OUT STD_LOGIC;
        numa_iter_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        numa_iter_out_full_n : IN STD_LOGIC;
        numa_iter_out_write : OUT STD_LOGIC;
        n_iter_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_iter_out_full_n : IN STD_LOGIC;
        n_iter_out_write : OUT STD_LOGIC;
        numc_iter_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        numc_iter_out_full_n : IN STD_LOGIC;
        numc_iter_out_write : OUT STD_LOGIC );
    end component;


    component region_store_c IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_i : IN STD_LOGIC_VECTOR (31 downto 0);
        C_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_o_ap_vld : OUT STD_LOGIC;
        c_buf_dout : IN STD_LOGIC_VECTOR (3199 downto 0);
        c_buf_empty_n : IN STD_LOGIC;
        c_buf_read : OUT STD_LOGIC;
        tilenumc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        tilenumc_empty_n : IN STD_LOGIC;
        tilenumc_read : OUT STD_LOGIC;
        tilen_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        tilen_empty_n : IN STD_LOGIC;
        tilen_read : OUT STD_LOGIC;
        numa_iter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numa_iter_empty_n : IN STD_LOGIC;
        numa_iter_read : OUT STD_LOGIC;
        n_iter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        n_iter_empty_n : IN STD_LOGIC;
        n_iter_read : OUT STD_LOGIC;
        numc_iter_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numc_iter_empty_n : IN STD_LOGIC;
        numc_iter_read : OUT STD_LOGIC );
    end component;


    component region_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component region_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component region_fifo_w3200_d1_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (3199 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (3199 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component region_start_for_load_a_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component region_start_for_load_b_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component region_start_for_conv_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component region_start_for_store_c_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    region_entry64_U0 : component region_region_entry64
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => region_entry64_U0_ap_start,
        start_full_n => region_entry64_U0_start_full_n,
        ap_done => region_entry64_U0_ap_done,
        ap_continue => region_entry64_U0_ap_continue,
        ap_idle => region_entry64_U0_ap_idle,
        ap_ready => region_entry64_U0_ap_ready,
        start_out => region_entry64_U0_start_out,
        start_write => region_entry64_U0_start_write,
        tilenuma => tilenuma,
        tilenumc => tilenumc,
        tilen => tilen,
        numa_iter => numa_iter,
        numc_iter => numc_iter,
        n_iter => n_iter,
        tilenuma_out_din => region_entry64_U0_tilenuma_out_din,
        tilenuma_out_full_n => tilenuma_c_full_n,
        tilenuma_out_write => region_entry64_U0_tilenuma_out_write,
        tilenuma_out1_din => region_entry64_U0_tilenuma_out1_din,
        tilenuma_out1_full_n => tilenuma_c11_full_n,
        tilenuma_out1_write => region_entry64_U0_tilenuma_out1_write,
        tilenumc_out_din => region_entry64_U0_tilenumc_out_din,
        tilenumc_out_full_n => tilenumc_c_full_n,
        tilenumc_out_write => region_entry64_U0_tilenumc_out_write,
        tilenumc_out2_din => region_entry64_U0_tilenumc_out2_din,
        tilenumc_out2_full_n => tilenumc_c12_full_n,
        tilenumc_out2_write => region_entry64_U0_tilenumc_out2_write,
        tilen_out_din => region_entry64_U0_tilen_out_din,
        tilen_out_full_n => tilen_c_full_n,
        tilen_out_write => region_entry64_U0_tilen_out_write,
        numa_iter_out_din => region_entry64_U0_numa_iter_out_din,
        numa_iter_out_full_n => numa_iter_c_full_n,
        numa_iter_out_write => region_entry64_U0_numa_iter_out_write,
        numa_iter_out3_din => region_entry64_U0_numa_iter_out3_din,
        numa_iter_out3_full_n => numa_iter_c13_full_n,
        numa_iter_out3_write => region_entry64_U0_numa_iter_out3_write,
        numc_iter_out_din => region_entry64_U0_numc_iter_out_din,
        numc_iter_out_full_n => numc_iter_c_full_n,
        numc_iter_out_write => region_entry64_U0_numc_iter_out_write,
        numc_iter_out4_din => region_entry64_U0_numc_iter_out4_din,
        numc_iter_out4_full_n => numc_iter_c14_full_n,
        numc_iter_out4_write => region_entry64_U0_numc_iter_out4_write,
        n_iter_out_din => region_entry64_U0_n_iter_out_din,
        n_iter_out_full_n => n_iter_c_full_n,
        n_iter_out_write => region_entry64_U0_n_iter_out_write,
        n_iter_out5_din => region_entry64_U0_n_iter_out5_din,
        n_iter_out5_full_n => n_iter_c15_full_n,
        n_iter_out5_write => region_entry64_U0_n_iter_out5_write);

    load_a_U0 : component region_load_a
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load_a_U0_ap_start,
        ap_done => load_a_U0_ap_done,
        ap_continue => load_a_U0_ap_continue,
        ap_idle => load_a_U0_ap_idle,
        ap_ready => load_a_U0_ap_ready,
        A => A,
        a_buf_s_din => load_a_U0_a_buf_s_din,
        a_buf_s_full_n => a_buf_full_n,
        a_buf_s_write => load_a_U0_a_buf_s_write,
        tilenuma_dout => tilenuma_c_dout,
        tilenuma_empty_n => tilenuma_c_empty_n,
        tilenuma_read => load_a_U0_tilenuma_read,
        tilen_dout => tilen_c_dout,
        tilen_empty_n => tilen_c_empty_n,
        tilen_read => load_a_U0_tilen_read,
        numa_iter_dout => numa_iter_c_dout,
        numa_iter_empty_n => numa_iter_c_empty_n,
        numa_iter_read => load_a_U0_numa_iter_read,
        n_iter_dout => n_iter_c_dout,
        n_iter_empty_n => n_iter_c_empty_n,
        n_iter_read => load_a_U0_n_iter_read,
        numc_iter_dout => numc_iter_c_dout,
        numc_iter_empty_n => numc_iter_c_empty_n,
        numc_iter_read => load_a_U0_numc_iter_read,
        tilenuma_out_din => load_a_U0_tilenuma_out_din,
        tilenuma_out_full_n => tilenuma_c16_full_n,
        tilenuma_out_write => load_a_U0_tilenuma_out_write,
        tilen_out_din => load_a_U0_tilen_out_din,
        tilen_out_full_n => tilen_c17_full_n,
        tilen_out_write => load_a_U0_tilen_out_write,
        numa_iter_out_din => load_a_U0_numa_iter_out_din,
        numa_iter_out_full_n => numa_iter_c18_full_n,
        numa_iter_out_write => load_a_U0_numa_iter_out_write,
        n_iter_out_din => load_a_U0_n_iter_out_din,
        n_iter_out_full_n => n_iter_c19_full_n,
        n_iter_out_write => load_a_U0_n_iter_out_write,
        numc_iter_out_din => load_a_U0_numc_iter_out_din,
        numc_iter_out_full_n => numc_iter_c20_full_n,
        numc_iter_out_write => load_a_U0_numc_iter_out_write);

    load_b_U0 : component region_load_b
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load_b_U0_ap_start,
        ap_done => load_b_U0_ap_done,
        ap_continue => load_b_U0_ap_continue,
        ap_idle => load_b_U0_ap_idle,
        ap_ready => load_b_U0_ap_ready,
        B => B,
        b_buf_din => load_b_U0_b_buf_din,
        b_buf_full_n => b_buf_full_n,
        b_buf_write => load_b_U0_b_buf_write,
        tilenuma_dout => tilenuma_c11_dout,
        tilenuma_empty_n => tilenuma_c11_empty_n,
        tilenuma_read => load_b_U0_tilenuma_read,
        tilenumc_dout => tilenumc_c_dout,
        tilenumc_empty_n => tilenumc_c_empty_n,
        tilenumc_read => load_b_U0_tilenumc_read,
        numa_iter_dout => numa_iter_c13_dout,
        numa_iter_empty_n => numa_iter_c13_empty_n,
        numa_iter_read => load_b_U0_numa_iter_read,
        n_iter_dout => n_iter_c15_dout,
        n_iter_empty_n => n_iter_c15_empty_n,
        n_iter_read => load_b_U0_n_iter_read,
        numc_iter_dout => numc_iter_c14_dout,
        numc_iter_empty_n => numc_iter_c14_empty_n,
        numc_iter_read => load_b_U0_numc_iter_read);

    conv_U0 : component region_conv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => conv_U0_ap_start,
        start_full_n => start_for_store_c_U0_full_n,
        ap_done => conv_U0_ap_done,
        ap_continue => conv_U0_ap_continue,
        ap_idle => conv_U0_ap_idle,
        ap_ready => conv_U0_ap_ready,
        start_out => conv_U0_start_out,
        start_write => conv_U0_start_write,
        a_buf_s_dout => a_buf_dout,
        a_buf_s_empty_n => a_buf_empty_n,
        a_buf_s_read => conv_U0_a_buf_s_read,
        b_buf_s_dout => b_buf_dout,
        b_buf_s_empty_n => b_buf_empty_n,
        b_buf_s_read => conv_U0_b_buf_s_read,
        c_buf_s_din => conv_U0_c_buf_s_din,
        c_buf_s_full_n => c_buf_full_n,
        c_buf_s_write => conv_U0_c_buf_s_write,
        tilen_dout => tilen_c17_dout,
        tilen_empty_n => tilen_c17_empty_n,
        tilen_read => conv_U0_tilen_read,
        tilenuma_dout => tilenuma_c16_dout,
        tilenuma_empty_n => tilenuma_c16_empty_n,
        tilenuma_read => conv_U0_tilenuma_read,
        tilenumc_dout => tilenumc_c12_dout,
        tilenumc_empty_n => tilenumc_c12_empty_n,
        tilenumc_read => conv_U0_tilenumc_read,
        numa_iter_dout => numa_iter_c18_dout,
        numa_iter_empty_n => numa_iter_c18_empty_n,
        numa_iter_read => conv_U0_numa_iter_read,
        n_iter_dout => n_iter_c19_dout,
        n_iter_empty_n => n_iter_c19_empty_n,
        n_iter_read => conv_U0_n_iter_read,
        numc_iter_dout => numc_iter_c20_dout,
        numc_iter_empty_n => numc_iter_c20_empty_n,
        numc_iter_read => conv_U0_numc_iter_read,
        tilen_out_din => conv_U0_tilen_out_din,
        tilen_out_full_n => tilen_c21_full_n,
        tilen_out_write => conv_U0_tilen_out_write,
        tilenumc_out_din => conv_U0_tilenumc_out_din,
        tilenumc_out_full_n => tilenumc_c22_full_n,
        tilenumc_out_write => conv_U0_tilenumc_out_write,
        numa_iter_out_din => conv_U0_numa_iter_out_din,
        numa_iter_out_full_n => numa_iter_c23_full_n,
        numa_iter_out_write => conv_U0_numa_iter_out_write,
        n_iter_out_din => conv_U0_n_iter_out_din,
        n_iter_out_full_n => n_iter_c24_full_n,
        n_iter_out_write => conv_U0_n_iter_out_write,
        numc_iter_out_din => conv_U0_numc_iter_out_din,
        numc_iter_out_full_n => numc_iter_c25_full_n,
        numc_iter_out_write => conv_U0_numc_iter_out_write);

    store_c_U0 : component region_store_c
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => store_c_U0_ap_start,
        ap_done => store_c_U0_ap_done,
        ap_continue => store_c_U0_ap_continue,
        ap_idle => store_c_U0_ap_idle,
        ap_ready => store_c_U0_ap_ready,
        C_i => C_i,
        C_o => store_c_U0_C_o,
        C_o_ap_vld => store_c_U0_C_o_ap_vld,
        c_buf_dout => c_buf_dout,
        c_buf_empty_n => c_buf_empty_n,
        c_buf_read => store_c_U0_c_buf_read,
        tilenumc_dout => tilenumc_c22_dout,
        tilenumc_empty_n => tilenumc_c22_empty_n,
        tilenumc_read => store_c_U0_tilenumc_read,
        tilen_dout => tilen_c21_dout,
        tilen_empty_n => tilen_c21_empty_n,
        tilen_read => store_c_U0_tilen_read,
        numa_iter_dout => numa_iter_c23_dout,
        numa_iter_empty_n => numa_iter_c23_empty_n,
        numa_iter_read => store_c_U0_numa_iter_read,
        n_iter_dout => n_iter_c24_dout,
        n_iter_empty_n => n_iter_c24_empty_n,
        n_iter_read => store_c_U0_n_iter_read,
        numc_iter_dout => numc_iter_c25_dout,
        numc_iter_empty_n => numc_iter_c25_empty_n,
        numc_iter_read => store_c_U0_numc_iter_read);

    tilenuma_c_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => region_entry64_U0_tilenuma_out_din,
        if_full_n => tilenuma_c_full_n,
        if_write => region_entry64_U0_tilenuma_out_write,
        if_dout => tilenuma_c_dout,
        if_empty_n => tilenuma_c_empty_n,
        if_read => load_a_U0_tilenuma_read);

    tilenuma_c11_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => region_entry64_U0_tilenuma_out1_din,
        if_full_n => tilenuma_c11_full_n,
        if_write => region_entry64_U0_tilenuma_out1_write,
        if_dout => tilenuma_c11_dout,
        if_empty_n => tilenuma_c11_empty_n,
        if_read => load_b_U0_tilenuma_read);

    tilenumc_c_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => region_entry64_U0_tilenumc_out_din,
        if_full_n => tilenumc_c_full_n,
        if_write => region_entry64_U0_tilenumc_out_write,
        if_dout => tilenumc_c_dout,
        if_empty_n => tilenumc_c_empty_n,
        if_read => load_b_U0_tilenumc_read);

    tilenumc_c12_U : component region_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => region_entry64_U0_tilenumc_out2_din,
        if_full_n => tilenumc_c12_full_n,
        if_write => region_entry64_U0_tilenumc_out2_write,
        if_dout => tilenumc_c12_dout,
        if_empty_n => tilenumc_c12_empty_n,
        if_read => conv_U0_tilenumc_read);

    tilen_c_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => region_entry64_U0_tilen_out_din,
        if_full_n => tilen_c_full_n,
        if_write => region_entry64_U0_tilen_out_write,
        if_dout => tilen_c_dout,
        if_empty_n => tilen_c_empty_n,
        if_read => load_a_U0_tilen_read);

    numa_iter_c_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => region_entry64_U0_numa_iter_out_din,
        if_full_n => numa_iter_c_full_n,
        if_write => region_entry64_U0_numa_iter_out_write,
        if_dout => numa_iter_c_dout,
        if_empty_n => numa_iter_c_empty_n,
        if_read => load_a_U0_numa_iter_read);

    numa_iter_c13_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => region_entry64_U0_numa_iter_out3_din,
        if_full_n => numa_iter_c13_full_n,
        if_write => region_entry64_U0_numa_iter_out3_write,
        if_dout => numa_iter_c13_dout,
        if_empty_n => numa_iter_c13_empty_n,
        if_read => load_b_U0_numa_iter_read);

    numc_iter_c_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => region_entry64_U0_numc_iter_out_din,
        if_full_n => numc_iter_c_full_n,
        if_write => region_entry64_U0_numc_iter_out_write,
        if_dout => numc_iter_c_dout,
        if_empty_n => numc_iter_c_empty_n,
        if_read => load_a_U0_numc_iter_read);

    numc_iter_c14_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => region_entry64_U0_numc_iter_out4_din,
        if_full_n => numc_iter_c14_full_n,
        if_write => region_entry64_U0_numc_iter_out4_write,
        if_dout => numc_iter_c14_dout,
        if_empty_n => numc_iter_c14_empty_n,
        if_read => load_b_U0_numc_iter_read);

    n_iter_c_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => region_entry64_U0_n_iter_out_din,
        if_full_n => n_iter_c_full_n,
        if_write => region_entry64_U0_n_iter_out_write,
        if_dout => n_iter_c_dout,
        if_empty_n => n_iter_c_empty_n,
        if_read => load_a_U0_n_iter_read);

    n_iter_c15_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => region_entry64_U0_n_iter_out5_din,
        if_full_n => n_iter_c15_full_n,
        if_write => region_entry64_U0_n_iter_out5_write,
        if_dout => n_iter_c15_dout,
        if_empty_n => n_iter_c15_empty_n,
        if_read => load_b_U0_n_iter_read);

    a_buf_U : component region_fifo_w3200_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_a_U0_a_buf_s_din,
        if_full_n => a_buf_full_n,
        if_write => load_a_U0_a_buf_s_write,
        if_dout => a_buf_dout,
        if_empty_n => a_buf_empty_n,
        if_read => conv_U0_a_buf_s_read);

    tilenuma_c16_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_a_U0_tilenuma_out_din,
        if_full_n => tilenuma_c16_full_n,
        if_write => load_a_U0_tilenuma_out_write,
        if_dout => tilenuma_c16_dout,
        if_empty_n => tilenuma_c16_empty_n,
        if_read => conv_U0_tilenuma_read);

    tilen_c17_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_a_U0_tilen_out_din,
        if_full_n => tilen_c17_full_n,
        if_write => load_a_U0_tilen_out_write,
        if_dout => tilen_c17_dout,
        if_empty_n => tilen_c17_empty_n,
        if_read => conv_U0_tilen_read);

    numa_iter_c18_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_a_U0_numa_iter_out_din,
        if_full_n => numa_iter_c18_full_n,
        if_write => load_a_U0_numa_iter_out_write,
        if_dout => numa_iter_c18_dout,
        if_empty_n => numa_iter_c18_empty_n,
        if_read => conv_U0_numa_iter_read);

    n_iter_c19_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_a_U0_n_iter_out_din,
        if_full_n => n_iter_c19_full_n,
        if_write => load_a_U0_n_iter_out_write,
        if_dout => n_iter_c19_dout,
        if_empty_n => n_iter_c19_empty_n,
        if_read => conv_U0_n_iter_read);

    numc_iter_c20_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_a_U0_numc_iter_out_din,
        if_full_n => numc_iter_c20_full_n,
        if_write => load_a_U0_numc_iter_out_write,
        if_dout => numc_iter_c20_dout,
        if_empty_n => numc_iter_c20_empty_n,
        if_read => conv_U0_numc_iter_read);

    b_buf_U : component region_fifo_w3200_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_b_U0_b_buf_din,
        if_full_n => b_buf_full_n,
        if_write => load_b_U0_b_buf_write,
        if_dout => b_buf_dout,
        if_empty_n => b_buf_empty_n,
        if_read => conv_U0_b_buf_s_read);

    c_buf_U : component region_fifo_w3200_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_U0_c_buf_s_din,
        if_full_n => c_buf_full_n,
        if_write => conv_U0_c_buf_s_write,
        if_dout => c_buf_dout,
        if_empty_n => c_buf_empty_n,
        if_read => store_c_U0_c_buf_read);

    tilen_c21_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_U0_tilen_out_din,
        if_full_n => tilen_c21_full_n,
        if_write => conv_U0_tilen_out_write,
        if_dout => tilen_c21_dout,
        if_empty_n => tilen_c21_empty_n,
        if_read => store_c_U0_tilen_read);

    tilenumc_c22_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_U0_tilenumc_out_din,
        if_full_n => tilenumc_c22_full_n,
        if_write => conv_U0_tilenumc_out_write,
        if_dout => tilenumc_c22_dout,
        if_empty_n => tilenumc_c22_empty_n,
        if_read => store_c_U0_tilenumc_read);

    numa_iter_c23_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_U0_numa_iter_out_din,
        if_full_n => numa_iter_c23_full_n,
        if_write => conv_U0_numa_iter_out_write,
        if_dout => numa_iter_c23_dout,
        if_empty_n => numa_iter_c23_empty_n,
        if_read => store_c_U0_numa_iter_read);

    n_iter_c24_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_U0_n_iter_out_din,
        if_full_n => n_iter_c24_full_n,
        if_write => conv_U0_n_iter_out_write,
        if_dout => n_iter_c24_dout,
        if_empty_n => n_iter_c24_empty_n,
        if_read => store_c_U0_n_iter_read);

    numc_iter_c25_U : component region_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_U0_numc_iter_out_din,
        if_full_n => numc_iter_c25_full_n,
        if_write => conv_U0_numc_iter_out_write,
        if_dout => numc_iter_c25_dout,
        if_empty_n => numc_iter_c25_empty_n,
        if_read => store_c_U0_numc_iter_read);

    start_for_load_a_U0_U : component region_start_for_load_a_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_load_a_U0_din,
        if_full_n => start_for_load_a_U0_full_n,
        if_write => region_entry64_U0_start_write,
        if_dout => start_for_load_a_U0_dout,
        if_empty_n => start_for_load_a_U0_empty_n,
        if_read => load_a_U0_ap_ready);

    start_for_load_b_U0_U : component region_start_for_load_b_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_load_b_U0_din,
        if_full_n => start_for_load_b_U0_full_n,
        if_write => region_entry64_U0_start_write,
        if_dout => start_for_load_b_U0_dout,
        if_empty_n => start_for_load_b_U0_empty_n,
        if_read => load_b_U0_ap_ready);

    start_for_conv_U0_U : component region_start_for_conv_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv_U0_din,
        if_full_n => start_for_conv_U0_full_n,
        if_write => region_entry64_U0_start_write,
        if_dout => start_for_conv_U0_dout,
        if_empty_n => start_for_conv_U0_empty_n,
        if_read => conv_U0_ap_ready);

    start_for_store_c_U0_U : component region_start_for_store_c_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_store_c_U0_din,
        if_full_n => start_for_store_c_U0_full_n,
        if_write => conv_U0_start_write,
        if_dout => start_for_store_c_U0_dout,
        if_empty_n => start_for_store_c_U0_empty_n,
        if_read => store_c_U0_ap_ready);




    C_o <= store_c_U0_C_o;
    C_o_ap_vld <= store_c_U0_C_o_ap_vld;
    ap_done <= store_c_U0_ap_done;
    ap_idle <= (store_c_U0_ap_idle and region_entry64_U0_ap_idle and load_b_U0_ap_idle and load_a_U0_ap_idle and conv_U0_ap_idle);
    ap_ready <= region_entry64_U0_ap_ready;
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= store_c_U0_ap_done;
    ap_sync_ready <= region_entry64_U0_ap_ready;
    conv_U0_ap_continue <= ap_const_logic_1;
    conv_U0_ap_start <= start_for_conv_U0_empty_n;
    load_a_U0_ap_continue <= ap_const_logic_1;
    load_a_U0_ap_start <= start_for_load_a_U0_empty_n;
    load_a_U0_start_full_n <= ap_const_logic_1;
    load_a_U0_start_write <= ap_const_logic_0;
    load_b_U0_ap_continue <= ap_const_logic_1;
    load_b_U0_ap_start <= start_for_load_b_U0_empty_n;
    load_b_U0_start_full_n <= ap_const_logic_1;
    load_b_U0_start_write <= ap_const_logic_0;
    region_entry64_U0_ap_continue <= ap_const_logic_1;
    region_entry64_U0_ap_start <= ap_start;
    region_entry64_U0_start_full_n <= (start_for_load_b_U0_full_n and start_for_load_a_U0_full_n and start_for_conv_U0_full_n);
    start_for_conv_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_load_a_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_load_b_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_store_c_U0_din <= (0=>ap_const_logic_1, others=>'-');
    store_c_U0_ap_continue <= ap_const_logic_1;
    store_c_U0_ap_start <= start_for_store_c_U0_empty_n;
    store_c_U0_start_full_n <= ap_const_logic_1;
    store_c_U0_start_write <= ap_const_logic_0;
end behav;
