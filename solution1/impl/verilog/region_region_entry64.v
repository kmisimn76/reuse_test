// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module region_region_entry64 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        tilenuma,
        tilenumc,
        tilen,
        numa_iter,
        numc_iter,
        n_iter,
        tilenuma_out_din,
        tilenuma_out_full_n,
        tilenuma_out_write,
        tilenuma_out1_din,
        tilenuma_out1_full_n,
        tilenuma_out1_write,
        tilenumc_out_din,
        tilenumc_out_full_n,
        tilenumc_out_write,
        tilenumc_out2_din,
        tilenumc_out2_full_n,
        tilenumc_out2_write,
        tilen_out_din,
        tilen_out_full_n,
        tilen_out_write,
        numa_iter_out_din,
        numa_iter_out_full_n,
        numa_iter_out_write,
        numa_iter_out3_din,
        numa_iter_out3_full_n,
        numa_iter_out3_write,
        numc_iter_out_din,
        numc_iter_out_full_n,
        numc_iter_out_write,
        numc_iter_out4_din,
        numc_iter_out4_full_n,
        numc_iter_out4_write,
        n_iter_out_din,
        n_iter_out_full_n,
        n_iter_out_write,
        n_iter_out5_din,
        n_iter_out5_full_n,
        n_iter_out5_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] tilenuma;
input  [31:0] tilenumc;
input  [31:0] tilen;
input  [31:0] numa_iter;
input  [31:0] numc_iter;
input  [31:0] n_iter;
output  [31:0] tilenuma_out_din;
input   tilenuma_out_full_n;
output   tilenuma_out_write;
output  [31:0] tilenuma_out1_din;
input   tilenuma_out1_full_n;
output   tilenuma_out1_write;
output  [31:0] tilenumc_out_din;
input   tilenumc_out_full_n;
output   tilenumc_out_write;
output  [31:0] tilenumc_out2_din;
input   tilenumc_out2_full_n;
output   tilenumc_out2_write;
output  [31:0] tilen_out_din;
input   tilen_out_full_n;
output   tilen_out_write;
output  [31:0] numa_iter_out_din;
input   numa_iter_out_full_n;
output   numa_iter_out_write;
output  [31:0] numa_iter_out3_din;
input   numa_iter_out3_full_n;
output   numa_iter_out3_write;
output  [31:0] numc_iter_out_din;
input   numc_iter_out_full_n;
output   numc_iter_out_write;
output  [31:0] numc_iter_out4_din;
input   numc_iter_out4_full_n;
output   numc_iter_out4_write;
output  [31:0] n_iter_out_din;
input   n_iter_out_full_n;
output   n_iter_out_write;
output  [31:0] n_iter_out5_din;
input   n_iter_out5_full_n;
output   n_iter_out5_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg tilenuma_out_write;
reg tilenuma_out1_write;
reg tilenumc_out_write;
reg tilenumc_out2_write;
reg tilen_out_write;
reg numa_iter_out_write;
reg numa_iter_out3_write;
reg numc_iter_out_write;
reg numc_iter_out4_write;
reg n_iter_out_write;
reg n_iter_out5_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    tilenuma_out_blk_n;
reg    tilenuma_out1_blk_n;
reg    tilenumc_out_blk_n;
reg    tilenumc_out2_blk_n;
reg    tilen_out_blk_n;
reg    numa_iter_out_blk_n;
reg    numa_iter_out3_blk_n;
reg    numc_iter_out_blk_n;
reg    numc_iter_out4_blk_n;
reg    n_iter_out_blk_n;
reg    n_iter_out5_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_iter_out5_blk_n = n_iter_out5_full_n;
    end else begin
        n_iter_out5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_iter_out5_write = 1'b1;
    end else begin
        n_iter_out5_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_iter_out_blk_n = n_iter_out_full_n;
    end else begin
        n_iter_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_iter_out_write = 1'b1;
    end else begin
        n_iter_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numa_iter_out3_blk_n = numa_iter_out3_full_n;
    end else begin
        numa_iter_out3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numa_iter_out3_write = 1'b1;
    end else begin
        numa_iter_out3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numa_iter_out_blk_n = numa_iter_out_full_n;
    end else begin
        numa_iter_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numa_iter_out_write = 1'b1;
    end else begin
        numa_iter_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numc_iter_out4_blk_n = numc_iter_out4_full_n;
    end else begin
        numc_iter_out4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numc_iter_out4_write = 1'b1;
    end else begin
        numc_iter_out4_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numc_iter_out_blk_n = numc_iter_out_full_n;
    end else begin
        numc_iter_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numc_iter_out_write = 1'b1;
    end else begin
        numc_iter_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tilen_out_blk_n = tilen_out_full_n;
    end else begin
        tilen_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tilen_out_write = 1'b1;
    end else begin
        tilen_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tilenuma_out1_blk_n = tilenuma_out1_full_n;
    end else begin
        tilenuma_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tilenuma_out1_write = 1'b1;
    end else begin
        tilenuma_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tilenuma_out_blk_n = tilenuma_out_full_n;
    end else begin
        tilenuma_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tilenuma_out_write = 1'b1;
    end else begin
        tilenuma_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tilenumc_out2_blk_n = tilenumc_out2_full_n;
    end else begin
        tilenumc_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tilenumc_out2_write = 1'b1;
    end else begin
        tilenumc_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tilenumc_out_blk_n = tilenumc_out_full_n;
    end else begin
        tilenumc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tilenumc_out_write = 1'b1;
    end else begin
        tilenumc_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((n_iter_out5_full_n == 1'b0) | (n_iter_out_full_n == 1'b0) | (real_start == 1'b0) | (numc_iter_out4_full_n == 1'b0) | (numc_iter_out_full_n == 1'b0) | (numa_iter_out3_full_n == 1'b0) | (numa_iter_out_full_n == 1'b0) | (tilen_out_full_n == 1'b0) | (tilenumc_out2_full_n == 1'b0) | (tilenumc_out_full_n == 1'b0) | (tilenuma_out1_full_n == 1'b0) | (tilenuma_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign n_iter_out5_din = n_iter;

assign n_iter_out_din = n_iter;

assign numa_iter_out3_din = numa_iter;

assign numa_iter_out_din = numa_iter;

assign numc_iter_out4_din = numc_iter;

assign numc_iter_out_din = numc_iter;

assign start_out = real_start;

assign tilen_out_din = tilen;

assign tilenuma_out1_din = tilenuma;

assign tilenuma_out_din = tilenuma;

assign tilenumc_out2_din = tilenumc;

assign tilenumc_out_din = tilenumc;

endmodule //region_region_entry64
