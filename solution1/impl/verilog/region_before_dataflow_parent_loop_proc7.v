// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module region_before_dataflow_parent_loop_proc7 (
        n_iter,
        numc_iter,
        A,
        B,
        C_i,
        C_o,
        tilenuma,
        tilen,
        tilenumc,
        ap_clk,
        ap_rst,
        numc_iter_ap_vld,
        A_ap_vld,
        B_ap_vld,
        C_i_ap_vld,
        C_o_ap_vld,
        tilenuma_ap_vld,
        tilen_ap_vld,
        tilenumc_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] n_iter;
input  [31:0] numc_iter;
input  [31:0] A;
input  [31:0] B;
input  [31:0] C_i;
output  [31:0] C_o;
input  [31:0] tilenuma;
input  [31:0] tilen;
input  [31:0] tilenumc;
input   ap_clk;
input   ap_rst;
input   numc_iter_ap_vld;
input   A_ap_vld;
input   B_ap_vld;
input   C_i_ap_vld;
output   C_o_ap_vld;
input   tilenuma_ap_vld;
input   tilen_ap_vld;
input   tilenumc_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_done;
reg ap_ready;
reg ap_idle;

wire   [31:0] dataflow_parent_loop_proc_U0_C_o;
wire    dataflow_parent_loop_proc_U0_C_o_ap_vld;
wire    dataflow_parent_loop_proc_U0_ap_start;
wire    dataflow_parent_loop_proc_U0_ap_done;
wire    dataflow_parent_loop_proc_U0_ap_ready;
wire    dataflow_parent_loop_proc_U0_ap_idle;
reg    dataflow_parent_loop_proc_U0_ap_continue;
wire    dataflow_parent_loop_proc_U0_numc_iter_ap_vld;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
reg   [31:0] loop_dataflow_input_count;
reg   [31:0] loop_dataflow_output_count;
wire   [31:0] bound_minus_1;
wire    dataflow_parent_loop_proc_U0_start_full_n;
wire    dataflow_parent_loop_proc_U0_start_write;

// power-on initialization
initial begin
#0 loop_dataflow_input_count = 32'd0;
#0 loop_dataflow_output_count = 32'd0;
end

region_before_dataflow_parent_loop_proc dataflow_parent_loop_proc_U0(
    .numc_iter(numc_iter),
    .A(A),
    .B(B),
    .C_i(C_i),
    .C_o(dataflow_parent_loop_proc_U0_C_o),
    .tilenuma(tilenuma),
    .tilen(tilen),
    .tilenumc(tilenumc),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .A_ap_vld(A_ap_vld),
    .tilenuma_ap_vld(tilenuma_ap_vld),
    .tilen_ap_vld(tilen_ap_vld),
    .B_ap_vld(B_ap_vld),
    .tilenumc_ap_vld(tilenumc_ap_vld),
    .C_i_ap_vld(C_i_ap_vld),
    .C_o_ap_vld(dataflow_parent_loop_proc_U0_C_o_ap_vld),
    .ap_start(dataflow_parent_loop_proc_U0_ap_start),
    .ap_done(dataflow_parent_loop_proc_U0_ap_done),
    .ap_ready(dataflow_parent_loop_proc_U0_ap_ready),
    .ap_idle(dataflow_parent_loop_proc_U0_ap_idle),
    .ap_continue(dataflow_parent_loop_proc_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 32'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 32'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 32'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_continue == 1'b1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 32'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_continue == 1'b1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 32'd0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 32'd0) & (ap_start == 1'b0) & (dataflow_parent_loop_proc_U0_ap_idle == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_parent_loop_proc_U0_ap_continue = 1'b1;
    end else begin
        dataflow_parent_loop_proc_U0_ap_continue = 1'b0;
    end
end

assign C_o = dataflow_parent_loop_proc_U0_C_o;

assign C_o_ap_vld = dataflow_parent_loop_proc_U0_C_o_ap_vld;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = dataflow_parent_loop_proc_U0_ap_done;

assign ap_sync_ready = dataflow_parent_loop_proc_U0_ap_ready;

assign bound_minus_1 = (n_iter - 32'd1);

assign dataflow_parent_loop_proc_U0_ap_start = ap_start;

assign dataflow_parent_loop_proc_U0_numc_iter_ap_vld = numc_iter_ap_vld;

assign dataflow_parent_loop_proc_U0_start_full_n = 1'b1;

assign dataflow_parent_loop_proc_U0_start_write = 1'b0;

endmodule //region_before_dataflow_parent_loop_proc7
