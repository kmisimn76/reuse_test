-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity region_before is
port (
    A : IN STD_LOGIC_VECTOR (31 downto 0);
    B : IN STD_LOGIC_VECTOR (31 downto 0);
    C_i : IN STD_LOGIC_VECTOR (31 downto 0);
    C_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    numa : IN STD_LOGIC_VECTOR (31 downto 0);
    numc : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    tilenuma : IN STD_LOGIC_VECTOR (31 downto 0);
    tilenumc : IN STD_LOGIC_VECTOR (31 downto 0);
    tilen : IN STD_LOGIC_VECTOR (31 downto 0);
    numa_iter : IN STD_LOGIC_VECTOR (31 downto 0);
    numc_iter : IN STD_LOGIC_VECTOR (31 downto 0);
    n_iter : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    C_o_ap_vld : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of region_before is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "region_before_region_before,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.366000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=0,HLS_SYN_FF=5503,HLS_SYN_LUT=3648,HLS_VERSION=2020_1}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal dataflow_parent_loop_proc7_U0_C_o : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_parent_loop_proc7_U0_C_o_ap_vld : STD_LOGIC;
    signal dataflow_parent_loop_proc7_U0_ap_start : STD_LOGIC;
    signal dataflow_parent_loop_proc7_U0_ap_done : STD_LOGIC;
    signal dataflow_parent_loop_proc7_U0_ap_ready : STD_LOGIC;
    signal dataflow_parent_loop_proc7_U0_ap_idle : STD_LOGIC;
    signal dataflow_parent_loop_proc7_U0_ap_continue : STD_LOGIC;
    signal dataflow_parent_loop_proc7_U0_n_iter_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal bound_minus_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_parent_loop_proc7_U0_start_full_n : STD_LOGIC;
    signal dataflow_parent_loop_proc7_U0_start_write : STD_LOGIC;

    component region_before_dataflow_parent_loop_proc7 IS
    port (
        n_iter : IN STD_LOGIC_VECTOR (31 downto 0);
        numc_iter : IN STD_LOGIC_VECTOR (31 downto 0);
        A : IN STD_LOGIC_VECTOR (31 downto 0);
        B : IN STD_LOGIC_VECTOR (31 downto 0);
        C_i : IN STD_LOGIC_VECTOR (31 downto 0);
        C_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        tilenuma : IN STD_LOGIC_VECTOR (31 downto 0);
        tilen : IN STD_LOGIC_VECTOR (31 downto 0);
        tilenumc : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        numc_iter_ap_vld : IN STD_LOGIC;
        A_ap_vld : IN STD_LOGIC;
        B_ap_vld : IN STD_LOGIC;
        C_i_ap_vld : IN STD_LOGIC;
        C_o_ap_vld : OUT STD_LOGIC;
        tilenuma_ap_vld : IN STD_LOGIC;
        tilen_ap_vld : IN STD_LOGIC;
        tilenumc_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dataflow_parent_loop_proc7_U0 : component region_before_dataflow_parent_loop_proc7
    port map (
        n_iter => n_iter,
        numc_iter => numc_iter,
        A => A,
        B => B,
        C_i => C_i,
        C_o => dataflow_parent_loop_proc7_U0_C_o,
        tilenuma => tilenuma,
        tilen => tilen,
        tilenumc => tilenumc,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        numc_iter_ap_vld => ap_const_logic_1,
        A_ap_vld => ap_const_logic_1,
        B_ap_vld => ap_const_logic_1,
        C_i_ap_vld => ap_const_logic_1,
        C_o_ap_vld => dataflow_parent_loop_proc7_U0_C_o_ap_vld,
        tilenuma_ap_vld => ap_const_logic_1,
        tilen_ap_vld => ap_const_logic_1,
        tilenumc_ap_vld => ap_const_logic_1,
        ap_start => dataflow_parent_loop_proc7_U0_ap_start,
        ap_done => dataflow_parent_loop_proc7_U0_ap_done,
        ap_ready => dataflow_parent_loop_proc7_U0_ap_ready,
        ap_idle => dataflow_parent_loop_proc7_U0_ap_idle,
        ap_continue => dataflow_parent_loop_proc7_U0_ap_continue);





    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_input_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_input_count = bound_minus_1)) and (ap_start = ap_const_logic_1) and (dataflow_parent_loop_proc7_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv32_1));
                elsif (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_parent_loop_proc7_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_output_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_output_count = bound_minus_1)) and (dataflow_parent_loop_proc7_U0_ap_continue = ap_const_logic_1) and (dataflow_parent_loop_proc7_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv32_1));
                elsif (((loop_dataflow_output_count = bound_minus_1) and (dataflow_parent_loop_proc7_U0_ap_continue = ap_const_logic_1) and (dataflow_parent_loop_proc7_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;

    C_o <= dataflow_parent_loop_proc7_U0_C_o;
    C_o_ap_vld <= dataflow_parent_loop_proc7_U0_C_o_ap_vld;

    ap_done_assign_proc : process(dataflow_parent_loop_proc7_U0_ap_done, loop_dataflow_output_count, bound_minus_1)
    begin
        if (((loop_dataflow_output_count = bound_minus_1) and (dataflow_parent_loop_proc7_U0_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(dataflow_parent_loop_proc7_U0_ap_idle, ap_start, loop_dataflow_output_count)
    begin
        if (((loop_dataflow_output_count = ap_const_lv32_0) and (ap_start = ap_const_logic_0) and (dataflow_parent_loop_proc7_U0_ap_idle = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(dataflow_parent_loop_proc7_U0_ap_ready, ap_start, loop_dataflow_input_count, bound_minus_1)
    begin
        if (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_parent_loop_proc7_U0_ap_ready = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= dataflow_parent_loop_proc7_U0_ap_done;
    ap_sync_ready <= dataflow_parent_loop_proc7_U0_ap_ready;
    bound_minus_1 <= std_logic_vector(unsigned(numa_iter) - unsigned(ap_const_lv32_1));
    dataflow_parent_loop_proc7_U0_ap_continue <= ap_const_logic_1;
    dataflow_parent_loop_proc7_U0_ap_start <= ap_start;
    dataflow_parent_loop_proc7_U0_n_iter_ap_vld <= ap_const_logic_1;
    dataflow_parent_loop_proc7_U0_start_full_n <= ap_const_logic_1;
    dataflow_parent_loop_proc7_U0_start_write <= ap_const_logic_0;
end behav;
